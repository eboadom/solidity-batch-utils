/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BatchCreatorInterface extends Interface {
  functions: {
    batchCreate: TypedFunctionDescription<{
      encode([_bytecodes, _args]: [Arrayish[], Arrayish[]]): string;
    }>;
  };

  events: {
    ContractCreated: TypedEventDescription<{
      encodeTopics([_contract]: [null]): string[];
    }>;
  };
}

export class BatchCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BatchCreator;
  attach(addressOrName: string): BatchCreator;
  deployed(): Promise<BatchCreator>;

  on(event: EventFilter | string, listener: Listener): BatchCreator;
  once(event: EventFilter | string, listener: Listener): BatchCreator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BatchCreator;
  removeAllListeners(eventName: EventFilter | string): BatchCreator;
  removeListener(eventName: any, listener: Listener): BatchCreator;

  interface: BatchCreatorInterface;

  functions: {
    batchCreate(
      _bytecodes: Arrayish[],
      _args: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  batchCreate(
    _bytecodes: Arrayish[],
    _args: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ContractCreated(_contract: null): EventFilter;
  };

  estimate: {
    batchCreate(_bytecodes: Arrayish[], _args: Arrayish[]): Promise<BigNumber>;
  };
}
