/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { BatchSender } from "./BatchSender";

export class BatchSenderFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<BatchSender> {
    return super.deploy(overrides) as Promise<BatchSender>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): BatchSender {
    return super.attach(address) as BatchSender;
  }
  connect(signer: Signer): BatchSenderFactory {
    return super.connect(signer) as BatchSenderFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchSender {
    return new Contract(address, _abi, signerOrProvider) as BatchSender;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct BatchSender.Call[]",
        name: "_calls",
        type: "tuple[]"
      }
    ],
    name: "batchSend",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610331806100206000396000f3fe60806040526004361061001e5760003560e01c8063e52b647814610023575b600080fd5b6100366100313660046101a7565b610038565b005b60005b815181101561011d576000606083838151811061005457fe5b6020026020010151600001516001600160a01b031684848151811061007557fe5b60200260200101516020015185858151811061008d57fe5b6020026020010151604001518686815181106100a557fe5b6020026020010151606001516040516100be919061029b565b600060405180830381858888f193505050503d80600081146100fc576040519150601f19603f3d011682016040523d82523d6000602084013e610101565b606091505b50915091508161011357805181602001fd5b505060010161003b565b5050565b80356001600160a01b038116811461013857600080fd5b92915050565b600082601f83011261014e578081fd5b813567ffffffffffffffff811115610164578182fd5b610177601f8201601f19166020016102d4565b915080825283602082850101111561018e57600080fd5b8060208401602084013760009082016020015292915050565b600060208083850312156101b9578182fd5b823567ffffffffffffffff808211156101d0578384fd5b81850186601f8201126101e1578485fd5b80359250818311156101f1578485fd5b6101fe84858502016102d4565b83815284810190828601875b8681101561028c5781358501608080601f19838f0301121561022a578a8bfd5b610233816102d4565b61023f8e8c8501610121565b81526040838101358c8301526060840135908201528183013589811115610264578c8dfd5b6102728f8d8387010161013e565b60608301525086525050928701929087019060010161020a565b50909998505050505050505050565b60008251815b818110156102bb57602081860181015185830152016102a1565b818111156102c95782828501525b509190910192915050565b60405181810167ffffffffffffffff811182821017156102f357600080fd5b60405291905056fea26469706673582212207d23245feb8e519a55a6f5fdcccb61dbd654d129ffedbbb3be0e45144c952b6c64736f6c63430006060033";
