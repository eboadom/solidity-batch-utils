/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { TransactionOverrides } from ".";
import { BatchCaller } from "./BatchCaller";

export class BatchCallerFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: TransactionOverrides): Promise<BatchCaller> {
    return super.deploy(overrides) as Promise<BatchCaller>;
  }
  getDeployTransaction(overrides?: TransactionOverrides): UnsignedTransaction {
    return super.getDeployTransaction(overrides);
  }
  attach(address: string): BatchCaller {
    return super.attach(address) as BatchCaller;
  }
  connect(signer: Signer): BatchCallerFactory {
    return super.connect(signer) as BatchCallerFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchCaller {
    return new Contract(address, _abi, signerOrProvider) as BatchCaller;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct BatchCaller.Call[]",
        name: "_calls",
        type: "tuple[]"
      }
    ],
    name: "batchCalls",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        internalType: "struct BatchCaller.CallResult[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061054c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d6e46ddd14610030575b600080fd5b61004361003e3660046102fe565b610059565b60405161005091906103fa565b60405180910390f35b606060005b82518110156100f25761009083828151811061007657fe5b6020026020010151600001516001600160a01b0316610224565b80156100c55750306001600160a01b03168382815181106100ad57fe5b6020026020010151600001516001600160a01b031614155b6100ea5760405162461bcd60e51b81526004016100e19061048b565b60405180910390fd5b60010161005e565b506060825167ffffffffffffffff8111801561010d57600080fd5b5060405190808252806020026020018201604052801561014757816020015b610134610260565b81526020019060019003908161012c5790505b50905060005b835181101561021d576000606085838151811061016657fe5b6020026020010151600001516001600160a01b031686848151811061018757fe5b6020026020010151602001516040516101a091906103de565b600060405180830381855afa9150503d80600081146101db576040519150601f19603f3d011682016040523d82523d6000602084013e6101e0565b606091505b5091509150604051806040016040528083151581526020018281525084848151811061020857fe5b6020908102919091010152505060010161014d565b5092915050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061025857508115155b949350505050565b60408051808201909152600081526060602082015290565b80356001600160a01b038116811461028f57600080fd5b92915050565b600082601f8301126102a5578081fd5b813567ffffffffffffffff8111156102bb578182fd5b6102ce601f8201601f19166020016104b6565b91508082528360208285010111156102e557600080fd5b8060208401602084013760009082016020015292915050565b60006020808385031215610310578182fd5b823567ffffffffffffffff80821115610327578384fd5b81850186601f820112610338578485fd5b8035925081831115610348578485fd5b61035584858502016104b6565b83815284810190828601875b868110156103cf5781358501604080601f19838f03011215610381578a8bfd5b61038a816104b6565b6103968e8c8501610278565b815281830135898111156103a8578c8dfd5b6103b68f8d83870101610295565b828d015250865250509287019290870190600101610361565b50909998505050505050505050565b600082516103f08184602087016104e6565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561047d57888303603f19018552815180511515845287015187840187905280519061044f828987016104dd565b61045c83828c85016104e6565b96890196601f92909201601f1916919091019350509086019060010161041e565b509098975050505050505050565b6020808252601190820152701253959053125117d49150d25412515395607a1b604082015260600190565b60405181810167ffffffffffffffff811182821017156104d557600080fd5b604052919050565b90815260200190565b60005b838110156105015781810151838201526020016104e9565b83811115610510576000848401525b5050505056fea2646970667358221220b9b111b6babb9f743b755217d7048fcc6d4ebfccc9f24aa772c91fb4b390be3e64736f6c63430006060033";
