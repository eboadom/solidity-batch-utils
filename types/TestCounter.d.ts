/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TestCounterInterface extends Interface {
  functions: {
    count: TypedFunctionDescription<{ encode([]: []): string }>;

    increment: TypedFunctionDescription<{
      encode([_value]: [BigNumberish]): string;
    }>;

    incrementWithValue: TypedFunctionDescription<{
      encode([_value]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class TestCounter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TestCounter;
  attach(addressOrName: string): TestCounter;
  deployed(): Promise<TestCounter>;

  on(event: EventFilter | string, listener: Listener): TestCounter;
  once(event: EventFilter | string, listener: Listener): TestCounter;
  addListener(eventName: EventFilter | string, listener: Listener): TestCounter;
  removeAllListeners(eventName: EventFilter | string): TestCounter;
  removeListener(eventName: any, listener: Listener): TestCounter;

  interface: TestCounterInterface;

  functions: {
    count(): Promise<BigNumber>;

    increment(
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    incrementWithValue(
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  count(): Promise<BigNumber>;

  increment(
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  incrementWithValue(
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    count(): Promise<BigNumber>;

    increment(_value: BigNumberish): Promise<BigNumber>;

    incrementWithValue(_value: BigNumberish): Promise<BigNumber>;
  };
}
