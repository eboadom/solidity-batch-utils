/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BatchSenderInterface extends Interface {
  functions: {
    batchSend: TypedFunctionDescription<{
      encode([_calls]: [
        {
          recipient: string;
          gas: BigNumberish;
          value: BigNumberish;
          data: Arrayish;
        }[]
      ]): string;
    }>;
  };

  events: {};
}

export class BatchSender extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BatchSender;
  attach(addressOrName: string): BatchSender;
  deployed(): Promise<BatchSender>;

  on(event: EventFilter | string, listener: Listener): BatchSender;
  once(event: EventFilter | string, listener: Listener): BatchSender;
  addListener(eventName: EventFilter | string, listener: Listener): BatchSender;
  removeAllListeners(eventName: EventFilter | string): BatchSender;
  removeListener(eventName: any, listener: Listener): BatchSender;

  interface: BatchSenderInterface;

  functions: {
    batchSend(
      _calls: {
        recipient: string;
        gas: BigNumberish;
        value: BigNumberish;
        data: Arrayish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  batchSend(
    _calls: {
      recipient: string;
      gas: BigNumberish;
      value: BigNumberish;
      data: Arrayish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    batchSend(
      _calls: {
        recipient: string;
        gas: BigNumberish;
        value: BigNumberish;
        data: Arrayish;
      }[]
    ): Promise<BigNumber>;
  };
}
